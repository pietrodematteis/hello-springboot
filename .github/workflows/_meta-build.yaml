on:
  workflow_call:
    inputs:
      app-version:
        type: string
        required: false
        default: "snapshot"
        description: "the version that should be set/used as tag for the container image"
      publish-container:
        type: boolean
        required: false
        default: false
        description: "publish and scan the container image once its built"
      ref-name:
        type: string
        required: true
        description: "Short ref name of the branch or tag that triggered the workflow run"
      src_type:
        description: 'Project Type (java, python, dotnet) see https://cyclonedx.github.io/cdxgen/#/PROJECT_TYPES'
        type: string
        required: false
        default: 'java'
      src_profile:
        description: BOM profile to use for generation. Default generic.
        type: string
        required: false
        default: 'generic'
      artifact_name:
        description: 'Name to use for the artifact'
        type: string
        required: true
    secrets:
      registry_user:
        required: true
      registry_token:
        required: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: pietrodematteis/hello-springboot

permissions: { }

jobs:
  build-java:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # tag=v4.2.2

      - name: Set up JDK
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # tag=v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Override project version with info camimg from tag
        run: mvn versions:set -DnewVersion=${{ inputs.app-version }}
        
      - name: Generate SBOM using cdxgen from src code
        #IMPORTANT: to select the image that best matches with the context
        run: |
          docker run --rm \
            -v $(pwd):/app:rw \
            -v /tmp:/tmp \
            -t ghcr.io/cyclonedx/cdxgen:v11.4.3@sha256:a7f032771f4937468dc288f8e94d292e84fb4f698bbd8b0c3a059838bb481277 \
            -r /app -o /tmp/src-bom.json -t ${{ inputs.src_type }} \
            --profile ${{ inputs.src_profile }} --json-pretty

      - name: Build with Maven
        run: |-
          mvn -B package 

      - name: Generate SBOM using cdxgen container from jar 
        #IMPORTANT to select the image that best matches with the context
        run: |
          docker run --rm \
            -v $(pwd)/target:/app:rw \
            -v /tmp:/tmp \
            -t ghcr.io/cyclonedx/cdxgen:v11.4.3@sha256:a7f032771f4937468dc288f8e94d292e84fb4f698bbd8b0c3a059838bb481277 \
            -r /app -o /tmp/package-bom.json -t jar \
            --profile ${{ inputs.src_profile }} --json-pretty

      - name: Copy SBOM into target folder
        run: cp /tmp/*bom.json  $(pwd)/target/
      
      - name: Generate SHA256 checksums
        run: |
          cd target
          for file in *.jar *bom.json; do
            sha256sum "$file" > "$file.sha256"
          done
    
      - name: Upload Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # tag=v4.6.2
        with:
          name: ${{ inputs.artifact_name }}
          path: |-
            target/*.jar
            target/*bom.json
            target/*.sha256
 
  build-container:
    runs-on: ubuntu-latest
    needs:
      - build-java
    if: ${{ inputs.publish-container }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # tag=v4.2.2

      - name: Download Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # tag=v4.3.0
        with:
          name: ${{ inputs.artifact_name }}
          path: target

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # tag=v3.11.1
        id: buildx
        with:
          install: true

      - name: Login to Docker.io
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # tag=v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_token }}
       
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0 # v5.0.0
        with:
          context: .
          file:	./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
      - name: Parse base image from Dockerfile
        id: base-img
        run: |
          BASE_IMAGE=$(grep -i '^FROM' ./Dockerfile | head -n 1 | awk '{print $2}')
          echo "Base image is: $BASE_IMAGE"
          echo "BASE_IMAGE_OUTPUT=$BASE_IMAGE" >> $GITHUB_OUTPUT
         
      - name: Run Trivy to generate SBOM with license from base Image
        if: ${{ inputs.publish-container }}
        uses: aquasecurity/trivy-action@0.32.0
        env:
          # https://github.com/aquasecurity/trivy-action/issues/389
          TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"
          TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db:1"
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.base-img.outputs.BASE_IMAGE_OUTPUT }}
          format: 'cyclonedx'
          output: 'base_image_bom.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'license'
  
      - name: Parse image from outputs.tags
        id: parse-img
        run: |
          TAGS='${{ steps.meta.outputs.tags }}'
          FIRST_TAG=$(echo "$TAGS" | head -n 1)
          echo "First tag is: $FIRST_TAG"
          echo "IMAGE_NAME_OUTPUT=$FIRST_TAG" >> $GITHUB_OUTPUT
          
      - name: Run Trivy to generate SBOM with license from os using generated Docker Image
        #if: false
        uses: aquasecurity/trivy-action@0.32.0
        env:
          # https://github.com/aquasecurity/trivy-action/issues/389
          TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"
          TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db:1"
        with:
          image-ref: ${{ steps.parse-img.outputs.IMAGE_NAME_OUTPUT }}
          format: 'cyclonedx'
          output: 'released_image_os_bom.json'
          #ignore-unfixed: true
          vuln-type: 'os'
          scanners: 'license'
          exit-code: '0'

      - name: Run Trivy to generate SBOM with license from library using generated Docker Image
        #if: false
        uses: aquasecurity/trivy-action@0.32.0
        env:
          # https://github.com/aquasecurity/trivy-action/issues/389
          TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"
          TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db:1"
        with:
          image-ref: ${{ steps.parse-img.outputs.IMAGE_NAME_OUTPUT }}
          format: 'cyclonedx'
          output: 'released_image_libs_bom.json'
          #ignore-unfixed: true
          vuln-type: 'library'
          scanners: 'license'
          exit-code: '0'

      - name: list files
        run: ls -la
        
      - name: Copy SBOM into target folder
        run: cp *bom.json  $(pwd)/target/
        
      - name: Upload Artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # tag=v4.6.2
        with:
          name: ${{ inputs.artifact_name }}
          path: |-
            target/*.jar
            target/*bom.json
            target/*.sha256
          overwrite: true   
